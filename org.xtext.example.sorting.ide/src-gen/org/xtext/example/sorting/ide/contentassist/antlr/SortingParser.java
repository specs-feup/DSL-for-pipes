/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.sorting.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.sorting.ide.contentassist.antlr.internal.InternalSortingParser;
import org.xtext.example.sorting.services.SortingGrammarAccess;

public class SortingParser extends AbstractContentAssistParser {

	@Inject
	private SortingGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalSortingParser createParser() {
		InternalSortingParser result = new InternalSortingParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAnythingAccess().getAlternatives(), "rule__Anything__Alternatives");
					put(grammarAccess.getComponentAccess().getAlternatives(), "rule__Component__Alternatives");
					put(grammarAccess.getConfigAccess().getGroup(), "rule__Config__Group__0");
					put(grammarAccess.getConfigAccess().getGroup_4(), "rule__Config__Group_4__0");
					put(grammarAccess.getConfigAccess().getGroup_5(), "rule__Config__Group_5__0");
					put(grammarAccess.getParamAccess().getGroup(), "rule__Param__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getPortAccess().getGroup(), "rule__Port__Group__0");
					put(grammarAccess.getSourceAccess().getGroup(), "rule__Source__Group__0");
					put(grammarAccess.getSourceAccess().getGroup_3(), "rule__Source__Group_3__0");
					put(grammarAccess.getFilterAccess().getGroup(), "rule__Filter__Group__0");
					put(grammarAccess.getSinkAccess().getGroup(), "rule__Sink__Group__0");
					put(grammarAccess.getSinkAccess().getGroup_5(), "rule__Sink__Group_5__0");
					put(grammarAccess.getInstanceAccess().getGroup(), "rule__Instance__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getConfigAccess().getNameAssignment_3(), "rule__Config__NameAssignment_3");
					put(grammarAccess.getConfigAccess().getParamsAssignment_4_2(), "rule__Config__ParamsAssignment_4_2");
					put(grammarAccess.getConfigAccess().getImportsAssignment_5_2(), "rule__Config__ImportsAssignment_5_2");
					put(grammarAccess.getConfigAccess().getComponentsAssignment_8(), "rule__Config__ComponentsAssignment_8");
					put(grammarAccess.getConfigAccess().getInstancesAssignment_12(), "rule__Config__InstancesAssignment_12");
					put(grammarAccess.getConfigAccess().getTransitionsAssignment_16(), "rule__Config__TransitionsAssignment_16");
					put(grammarAccess.getParamAccess().getValueAssignment_2(), "rule__Param__ValueAssignment_2");
					put(grammarAccess.getImportAccess().getNameAssignment_1(), "rule__Import__NameAssignment_1");
					put(grammarAccess.getPortAccess().getNameAssignment_2(), "rule__Port__NameAssignment_2");
					put(grammarAccess.getPortAccess().getTypeAssignment_3(), "rule__Port__TypeAssignment_3");
					put(grammarAccess.getSourceAccess().getNameAssignment_1(), "rule__Source__NameAssignment_1");
					put(grammarAccess.getSourceAccess().getInPortsAssignment_3_1(), "rule__Source__InPortsAssignment_3_1");
					put(grammarAccess.getSourceAccess().getOutPortsAssignment_5(), "rule__Source__OutPortsAssignment_5");
					put(grammarAccess.getSourceAccess().getCodeAssignment_7(), "rule__Source__CodeAssignment_7");
					put(grammarAccess.getFilterAccess().getNameAssignment_1(), "rule__Filter__NameAssignment_1");
					put(grammarAccess.getFilterAccess().getInPortsAssignment_4(), "rule__Filter__InPortsAssignment_4");
					put(grammarAccess.getFilterAccess().getOutPortsAssignment_6(), "rule__Filter__OutPortsAssignment_6");
					put(grammarAccess.getFilterAccess().getCodeAssignment_8(), "rule__Filter__CodeAssignment_8");
					put(grammarAccess.getSinkAccess().getNameAssignment_1(), "rule__Sink__NameAssignment_1");
					put(grammarAccess.getSinkAccess().getInPortsAssignment_4(), "rule__Sink__InPortsAssignment_4");
					put(grammarAccess.getSinkAccess().getOutPortsAssignment_5_1(), "rule__Sink__OutPortsAssignment_5_1");
					put(grammarAccess.getSinkAccess().getCodeAssignment_7(), "rule__Sink__CodeAssignment_7");
					put(grammarAccess.getInstanceAccess().getComponentAssignment_0(), "rule__Instance__ComponentAssignment_0");
					put(grammarAccess.getInstanceAccess().getNameAssignment_1(), "rule__Instance__NameAssignment_1");
					put(grammarAccess.getInstanceAccess().getCodeAssignment_2(), "rule__Instance__CodeAssignment_2");
					put(grammarAccess.getTransitionAccess().getSourceAssignment_1(), "rule__Transition__SourceAssignment_1");
					put(grammarAccess.getTransitionAccess().getSourcePortAssignment_3(), "rule__Transition__SourcePortAssignment_3");
					put(grammarAccess.getTransitionAccess().getTargetAssignment_7(), "rule__Transition__TargetAssignment_7");
					put(grammarAccess.getTransitionAccess().getTargetPortAssignment_9(), "rule__Transition__TargetPortAssignment_9");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SortingGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SortingGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
