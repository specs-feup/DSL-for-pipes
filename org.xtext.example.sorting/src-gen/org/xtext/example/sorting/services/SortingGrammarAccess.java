/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.sorting.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SortingGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sorting.Sorting.Config");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConfigAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConfigKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cParamsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cParamsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cParamsParamParserRuleCall_4_2_0 = (RuleCall)cParamsAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cImportsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cImportsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_5_2_0 = (RuleCall)cImportsAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cComponentsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cComponentsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cComponentsComponentParserRuleCall_8_0 = (RuleCall)cComponentsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cInstancesKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cInstancesAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cInstancesInstanceParserRuleCall_12_0 = (RuleCall)cInstancesAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cTransitionsKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cLeftCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cTransitionsAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cTransitionsTransitionParserRuleCall_16_0 = (RuleCall)cTransitionsAssignment_16.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Keyword cRightCurlyBracketKeyword_18 = (Keyword)cGroup.eContents().get(18);
		
		//Config:
		//	{Config}
		//	'config' '{' name=ID ('params' '{' params+=Param+ '}')? ('imports' '{' imports+=Import+ '}')?
		//	'components' '{' components+=Component+ '}'
		//	'instances' '{' instances+=Instance+ '}'
		//	'transitions' '{' transitions+=Transition+ '}' '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Config} 'config' '{' name=ID ('params' '{' params+=Param+ '}')? ('imports' '{' imports+=Import+ '}')? 'components' '{'
		//components+=Component+ '}' 'instances' '{' instances+=Instance+ '}' 'transitions' '{' transitions+=Transition+ '}' '}'
		public Group getGroup() { return cGroup; }
		
		//{Config}
		public Action getConfigAction_0() { return cConfigAction_0; }
		
		//'config'
		public Keyword getConfigKeyword_1() { return cConfigKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('params' '{' params+=Param+ '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'params'
		public Keyword getParamsKeyword_4_0() { return cParamsKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//params+=Param+
		public Assignment getParamsAssignment_4_2() { return cParamsAssignment_4_2; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_4_2_0() { return cParamsParamParserRuleCall_4_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
		
		//('imports' '{' imports+=Import+ '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'imports'
		public Keyword getImportsKeyword_5_0() { return cImportsKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//imports+=Import+
		public Assignment getImportsAssignment_5_2() { return cImportsAssignment_5_2; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_5_2_0() { return cImportsImportParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
		
		//'components'
		public Keyword getComponentsKeyword_6() { return cComponentsKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//components+=Component+
		public Assignment getComponentsAssignment_8() { return cComponentsAssignment_8; }
		
		//Component
		public RuleCall getComponentsComponentParserRuleCall_8_0() { return cComponentsComponentParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
		
		//'instances'
		public Keyword getInstancesKeyword_10() { return cInstancesKeyword_10; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }
		
		//instances+=Instance+
		public Assignment getInstancesAssignment_12() { return cInstancesAssignment_12; }
		
		//Instance
		public RuleCall getInstancesInstanceParserRuleCall_12_0() { return cInstancesInstanceParserRuleCall_12_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
		
		//'transitions'
		public Keyword getTransitionsKeyword_14() { return cTransitionsKeyword_14; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_15() { return cLeftCurlyBracketKeyword_15; }
		
		//transitions+=Transition+
		public Assignment getTransitionsAssignment_16() { return cTransitionsAssignment_16; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_16_0() { return cTransitionsTransitionParserRuleCall_16_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_17() { return cRightCurlyBracketKeyword_17; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_18() { return cRightCurlyBracketKeyword_18; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sorting.Sorting.Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParamKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAnythingParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Param:
		//	'param' '{' value=Anything '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'param' '{' value=Anything '}'
		public Group getGroup() { return cGroup; }
		
		//'param'
		public Keyword getParamKeyword_0() { return cParamKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//value=Anything
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Anything
		public RuleCall getValueAnythingParserRuleCall_2_0() { return cValueAnythingParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class AnythingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sorting.Sorting.Anything");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWSTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cCommaKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cFullStopKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cExclamationMarkKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cQuestionMarkKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cLeftSquareBracketKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cRightSquareBracketKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cPlusSignKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cHyphenMinusKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cSolidusKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cAsteriskKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cLessThanSignKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cGreaterThanSignKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cColonKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cEqualsSignKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cPercentSignKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		
		//Anything:
		//	(ID | INT | STRING | WS | '(' | ')' | ',' | '.' | '!' | '?' | '[' | ']' | '+' | '-' | '/' | '*' | '<' | '>' | ':' |
		//	'=' | '%')+;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID | INT | STRING | WS | '(' | ')' | ',' | '.' | '!' | '?' | '[' | ']' | '+' | '-' | '/' | '*' | '<' | '>' | ':' | '='
		//| '%')+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_3() { return cWSTerminalRuleCall_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//'.'
		public Keyword getFullStopKeyword_7() { return cFullStopKeyword_7; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_8() { return cExclamationMarkKeyword_8; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_9() { return cQuestionMarkKeyword_9; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_10() { return cLeftSquareBracketKeyword_10; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_11() { return cRightSquareBracketKeyword_11; }
		
		//'+'
		public Keyword getPlusSignKeyword_12() { return cPlusSignKeyword_12; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_13() { return cHyphenMinusKeyword_13; }
		
		//'/'
		public Keyword getSolidusKeyword_14() { return cSolidusKeyword_14; }
		
		//'*'
		public Keyword getAsteriskKeyword_15() { return cAsteriskKeyword_15; }
		
		//'<'
		public Keyword getLessThanSignKeyword_16() { return cLessThanSignKeyword_16; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_17() { return cGreaterThanSignKeyword_17; }
		
		//':'
		public Keyword getColonKeyword_18() { return cColonKeyword_18; }
		
		//'='
		public Keyword getEqualsSignKeyword_19() { return cEqualsSignKeyword_19; }
		
		//'%'
		public Keyword getPercentSignKeyword_20() { return cPercentSignKeyword_20; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sorting.Sorting.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAnythingParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' name=Anything;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' name=Anything
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//name=Anything
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Anything
		public RuleCall getNameAnythingParserRuleCall_1_0() { return cNameAnythingParserRuleCall_1_0; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sorting.Sorting.Port");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeAnythingParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Port:
		//	'port' '{' name=ID type=Anything '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'port' '{' name=ID type=Anything '}'
		public Group getGroup() { return cGroup; }
		
		//'port'
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//type=Anything
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Anything
		public RuleCall getTypeAnythingParserRuleCall_3_0() { return cTypeAnythingParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sorting.Sorting.Component");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSourceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSinkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFilterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Component:
		//	Source | Sink | Filter;
		@Override public ParserRule getRule() { return rule; }
		
		//Source | Sink | Filter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Source
		public RuleCall getSourceParserRuleCall_0() { return cSourceParserRuleCall_0; }
		
		//Sink
		public RuleCall getSinkParserRuleCall_1() { return cSinkParserRuleCall_1; }
		
		//Filter
		public RuleCall getFilterParserRuleCall_2() { return cFilterParserRuleCall_2; }
	}
	public class SourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sorting.Sorting.Source");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInPortsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInPortsPortParserRuleCall_3_1_0 = (RuleCall)cInPortsAssignment_3_1.eContents().get(0);
		private final Keyword cOutKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOutPortsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOutPortsPortParserRuleCall_5_0 = (RuleCall)cOutPortsAssignment_5.eContents().get(0);
		private final Keyword cMethodKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCodeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCodeCODETerminalRuleCall_7_0 = (RuleCall)cCodeAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Source:
		//	'source' name=ID '{' ('in:' inPorts+=Port+)?
		//	'out:' outPorts+=Port+
		//	'method:' code=CODE
		//	'}'
		//	//TODO foreach N (param ou unknown)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'source' name=ID '{' ('in:' inPorts+=Port+)? 'out:' outPorts+=Port+ 'method:' code=CODE '}'
		public Group getGroup() { return cGroup; }
		
		//'source'
		public Keyword getSourceKeyword_0() { return cSourceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('in:' inPorts+=Port+)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'in:'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//inPorts+=Port+
		public Assignment getInPortsAssignment_3_1() { return cInPortsAssignment_3_1; }
		
		//Port
		public RuleCall getInPortsPortParserRuleCall_3_1_0() { return cInPortsPortParserRuleCall_3_1_0; }
		
		//'out:'
		public Keyword getOutKeyword_4() { return cOutKeyword_4; }
		
		//outPorts+=Port+
		public Assignment getOutPortsAssignment_5() { return cOutPortsAssignment_5; }
		
		//Port
		public RuleCall getOutPortsPortParserRuleCall_5_0() { return cOutPortsPortParserRuleCall_5_0; }
		
		//'method:'
		public Keyword getMethodKeyword_6() { return cMethodKeyword_6; }
		
		//code=CODE
		public Assignment getCodeAssignment_7() { return cCodeAssignment_7; }
		
		//CODE
		public RuleCall getCodeCODETerminalRuleCall_7_0() { return cCodeCODETerminalRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class FilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sorting.Sorting.Filter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFilterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInPortsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInPortsPortParserRuleCall_4_0 = (RuleCall)cInPortsAssignment_4.eContents().get(0);
		private final Keyword cOutKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOutPortsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOutPortsPortParserRuleCall_6_0 = (RuleCall)cOutPortsAssignment_6.eContents().get(0);
		private final Keyword cMethodKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cCodeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cCodeCODETerminalRuleCall_8_0 = (RuleCall)cCodeAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Filter:
		//	'filter' name=ID '{'
		//	'in:' inPorts+=Port+
		//	'out:' outPorts+=Port+
		//	'method:' code=CODE
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'filter' name=ID '{' 'in:' inPorts+=Port+ 'out:' outPorts+=Port+ 'method:' code=CODE '}'
		public Group getGroup() { return cGroup; }
		
		//'filter'
		public Keyword getFilterKeyword_0() { return cFilterKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'in:'
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//inPorts+=Port+
		public Assignment getInPortsAssignment_4() { return cInPortsAssignment_4; }
		
		//Port
		public RuleCall getInPortsPortParserRuleCall_4_0() { return cInPortsPortParserRuleCall_4_0; }
		
		//'out:'
		public Keyword getOutKeyword_5() { return cOutKeyword_5; }
		
		//outPorts+=Port+
		public Assignment getOutPortsAssignment_6() { return cOutPortsAssignment_6; }
		
		//Port
		public RuleCall getOutPortsPortParserRuleCall_6_0() { return cOutPortsPortParserRuleCall_6_0; }
		
		//'method:'
		public Keyword getMethodKeyword_7() { return cMethodKeyword_7; }
		
		//code=CODE
		public Assignment getCodeAssignment_8() { return cCodeAssignment_8; }
		
		//CODE
		public RuleCall getCodeCODETerminalRuleCall_8_0() { return cCodeCODETerminalRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class SinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sorting.Sorting.Sink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInPortsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInPortsPortParserRuleCall_4_0 = (RuleCall)cInPortsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOutKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOutPortsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOutPortsPortParserRuleCall_5_1_0 = (RuleCall)cOutPortsAssignment_5_1.eContents().get(0);
		private final Keyword cMethodKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCodeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCodeCODETerminalRuleCall_7_0 = (RuleCall)cCodeAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Sink:
		//	'sink' name=ID '{'
		//	'in:' inPorts+=Port+ ('out:' outPorts+=Port+)?
		//	'method:' code=CODE
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'sink' name=ID '{' 'in:' inPorts+=Port+ ('out:' outPorts+=Port+)? 'method:' code=CODE '}'
		public Group getGroup() { return cGroup; }
		
		//'sink'
		public Keyword getSinkKeyword_0() { return cSinkKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'in:'
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//inPorts+=Port+
		public Assignment getInPortsAssignment_4() { return cInPortsAssignment_4; }
		
		//Port
		public RuleCall getInPortsPortParserRuleCall_4_0() { return cInPortsPortParserRuleCall_4_0; }
		
		//('out:' outPorts+=Port+)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'out:'
		public Keyword getOutKeyword_5_0() { return cOutKeyword_5_0; }
		
		//outPorts+=Port+
		public Assignment getOutPortsAssignment_5_1() { return cOutPortsAssignment_5_1; }
		
		//Port
		public RuleCall getOutPortsPortParserRuleCall_5_1_0() { return cOutPortsPortParserRuleCall_5_1_0; }
		
		//'method:'
		public Keyword getMethodKeyword_6() { return cMethodKeyword_6; }
		
		//code=CODE
		public Assignment getCodeAssignment_7() { return cCodeAssignment_7; }
		
		//CODE
		public RuleCall getCodeCODETerminalRuleCall_7_0() { return cCodeCODETerminalRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class InstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sorting.Sorting.Instance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComponentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cComponentComponentCrossReference_0_0 = (CrossReference)cComponentAssignment_0.eContents().get(0);
		private final RuleCall cComponentComponentIDTerminalRuleCall_0_0_1 = (RuleCall)cComponentComponentCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cCodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodeCODETerminalRuleCall_2_0 = (RuleCall)cCodeAssignment_2.eContents().get(0);
		
		//Instance:
		//	component=[Component] name=ID
		//	code=CODE?;
		@Override public ParserRule getRule() { return rule; }
		
		//component=[Component] name=ID code=CODE?
		public Group getGroup() { return cGroup; }
		
		//component=[Component]
		public Assignment getComponentAssignment_0() { return cComponentAssignment_0; }
		
		//[Component]
		public CrossReference getComponentComponentCrossReference_0_0() { return cComponentComponentCrossReference_0_0; }
		
		//ID
		public RuleCall getComponentComponentIDTerminalRuleCall_0_0_1() { return cComponentComponentIDTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//code=CODE?
		public Assignment getCodeAssignment_2() { return cCodeAssignment_2; }
		
		//CODE
		public RuleCall getCodeCODETerminalRuleCall_2_0() { return cCodeCODETerminalRuleCall_2_0; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sorting.Sorting.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceInstanceCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceInstanceIDTerminalRuleCall_1_0_1 = (RuleCall)cSourceInstanceCrossReference_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourcePortAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSourcePortPortCrossReference_3_0 = (CrossReference)cSourcePortAssignment_3.eContents().get(0);
		private final RuleCall cSourcePortPortIDTerminalRuleCall_3_0_1 = (RuleCall)cSourcePortPortCrossReference_3_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTargetAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cTargetInstanceCrossReference_7_0 = (CrossReference)cTargetAssignment_7.eContents().get(0);
		private final RuleCall cTargetInstanceIDTerminalRuleCall_7_0_1 = (RuleCall)cTargetInstanceCrossReference_7_0.eContents().get(1);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTargetPortAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cTargetPortPortCrossReference_9_0 = (CrossReference)cTargetPortAssignment_9.eContents().get(0);
		private final RuleCall cTargetPortPortIDTerminalRuleCall_9_0_1 = (RuleCall)cTargetPortPortCrossReference_9_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Transition: //(source=[Source]|source=[Filter]) "=>" (target=[Filter]|target=[Sink])|
		////source=[Instance] "=>" target=[Instance] /*sem Instance no Component*/
		//	'[' source=[Instance] ',' sourcePort=[Port] ']' '->' '[' target=[Instance] ',' targetPort=[Port] ']';
		@Override public ParserRule getRule() { return rule; }
		
		////(source=[Source]|source=[Filter]) "=>" (target=[Filter]|target=[Sink])|
		////source=[Instance] "=>" target=[Instance] /*sem Instance no Component*/
		//'[' source=[Instance] ',' sourcePort=[Port] ']' '->' '[' target=[Instance] ',' targetPort=[Port] ']'
		public Group getGroup() { return cGroup; }
		
		////(source=[Source]|source=[Filter]) "=>" (target=[Filter]|target=[Sink])|
		////source=[Instance] "=>" target=[Instance] /*sem Instance no Component*/
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//source=[Instance]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//[Instance]
		public CrossReference getSourceInstanceCrossReference_1_0() { return cSourceInstanceCrossReference_1_0; }
		
		//ID
		public RuleCall getSourceInstanceIDTerminalRuleCall_1_0_1() { return cSourceInstanceIDTerminalRuleCall_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//sourcePort=[Port]
		public Assignment getSourcePortAssignment_3() { return cSourcePortAssignment_3; }
		
		//[Port]
		public CrossReference getSourcePortPortCrossReference_3_0() { return cSourcePortPortCrossReference_3_0; }
		
		//ID
		public RuleCall getSourcePortPortIDTerminalRuleCall_3_0_1() { return cSourcePortPortIDTerminalRuleCall_3_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6() { return cLeftSquareBracketKeyword_6; }
		
		//target=[Instance]
		public Assignment getTargetAssignment_7() { return cTargetAssignment_7; }
		
		//[Instance]
		public CrossReference getTargetInstanceCrossReference_7_0() { return cTargetInstanceCrossReference_7_0; }
		
		//ID
		public RuleCall getTargetInstanceIDTerminalRuleCall_7_0_1() { return cTargetInstanceIDTerminalRuleCall_7_0_1; }
		
		//','
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//targetPort=[Port]
		public Assignment getTargetPortAssignment_9() { return cTargetPortAssignment_9; }
		
		//[Port]
		public CrossReference getTargetPortPortCrossReference_9_0() { return cTargetPortPortCrossReference_9_0; }
		
		//ID
		public RuleCall getTargetPortPortIDTerminalRuleCall_9_0_1() { return cTargetPortPortIDTerminalRuleCall_9_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_10() { return cRightSquareBracketKeyword_10; }
	}
	
	
	private final ConfigElements pConfig;
	private final ParamElements pParam;
	private final AnythingElements pAnything;
	private final TerminalRule tCODE;
	private final ImportElements pImport;
	private final PortElements pPort;
	private final ComponentElements pComponent;
	private final SourceElements pSource;
	private final FilterElements pFilter;
	private final SinkElements pSink;
	private final InstanceElements pInstance;
	private final TransitionElements pTransition;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SortingGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pConfig = new ConfigElements();
		this.pParam = new ParamElements();
		this.pAnything = new AnythingElements();
		this.tCODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sorting.Sorting.CODE");
		this.pImport = new ImportElements();
		this.pPort = new PortElements();
		this.pComponent = new ComponentElements();
		this.pSource = new SourceElements();
		this.pFilter = new FilterElements();
		this.pSink = new SinkElements();
		this.pInstance = new InstanceElements();
		this.pTransition = new TransitionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.sorting.Sorting".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Config:
	//	{Config}
	//	'config' '{' name=ID ('params' '{' params+=Param+ '}')? ('imports' '{' imports+=Import+ '}')?
	//	'components' '{' components+=Component+ '}'
	//	'instances' '{' instances+=Instance+ '}'
	//	'transitions' '{' transitions+=Transition+ '}' '}';
	public ConfigElements getConfigAccess() {
		return pConfig;
	}
	
	public ParserRule getConfigRule() {
		return getConfigAccess().getRule();
	}
	
	//Param:
	//	'param' '{' value=Anything '}';
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	//Anything:
	//	(ID | INT | STRING | WS | '(' | ')' | ',' | '.' | '!' | '?' | '[' | ']' | '+' | '-' | '/' | '*' | '<' | '>' | ':' |
	//	'=' | '%')+;
	public AnythingElements getAnythingAccess() {
		return pAnything;
	}
	
	public ParserRule getAnythingRule() {
		return getAnythingAccess().getRule();
	}
	
	//terminal CODE:
	//	'/#'->'#/'
	//	/*'%{' (~['}'])* '}' ('}' | ~['}','%'] (~['}'])* '}')* '%'*/;
	public TerminalRule getCODERule() {
		return tCODE;
	}
	
	//Import:
	//	'import' name=Anything;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Port:
	//	'port' '{' name=ID type=Anything '}';
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//Component:
	//	Source | Sink | Filter;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//Source:
	//	'source' name=ID '{' ('in:' inPorts+=Port+)?
	//	'out:' outPorts+=Port+
	//	'method:' code=CODE
	//	'}'
	//	//TODO foreach N (param ou unknown)
	//;
	public SourceElements getSourceAccess() {
		return pSource;
	}
	
	public ParserRule getSourceRule() {
		return getSourceAccess().getRule();
	}
	
	//Filter:
	//	'filter' name=ID '{'
	//	'in:' inPorts+=Port+
	//	'out:' outPorts+=Port+
	//	'method:' code=CODE
	//	'}';
	public FilterElements getFilterAccess() {
		return pFilter;
	}
	
	public ParserRule getFilterRule() {
		return getFilterAccess().getRule();
	}
	
	//Sink:
	//	'sink' name=ID '{'
	//	'in:' inPorts+=Port+ ('out:' outPorts+=Port+)?
	//	'method:' code=CODE
	//	'}';
	public SinkElements getSinkAccess() {
		return pSink;
	}
	
	public ParserRule getSinkRule() {
		return getSinkAccess().getRule();
	}
	
	//Instance:
	//	component=[Component] name=ID
	//	code=CODE?;
	public InstanceElements getInstanceAccess() {
		return pInstance;
	}
	
	public ParserRule getInstanceRule() {
		return getInstanceAccess().getRule();
	}
	
	//Transition: //(source=[Source]|source=[Filter]) "=>" (target=[Filter]|target=[Sink])|
	////source=[Instance] "=>" target=[Instance] /*sem Instance no Component*/
	//	'[' source=[Instance] ',' sourcePort=[Port] ']' '->' '[' target=[Instance] ',' targetPort=[Port] ']';
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
