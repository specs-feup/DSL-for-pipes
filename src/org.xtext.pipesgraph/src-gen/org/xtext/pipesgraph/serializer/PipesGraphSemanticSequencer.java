/*
 * generated by Xtext 2.12.0
 */
package org.xtext.pipesgraph.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.pipesgraph.pipesGraph.Config;
import org.xtext.pipesgraph.pipesGraph.Filter;
import org.xtext.pipesgraph.pipesGraph.Import;
import org.xtext.pipesgraph.pipesGraph.Instance;
import org.xtext.pipesgraph.pipesGraph.Param;
import org.xtext.pipesgraph.pipesGraph.PipesGraphPackage;
import org.xtext.pipesgraph.pipesGraph.Port;
import org.xtext.pipesgraph.pipesGraph.Sink;
import org.xtext.pipesgraph.pipesGraph.Source;
import org.xtext.pipesgraph.pipesGraph.Transition;
import org.xtext.pipesgraph.services.PipesGraphGrammarAccess;

@SuppressWarnings("all")
public class PipesGraphSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PipesGraphGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PipesGraphPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PipesGraphPackage.CONFIG:
				sequence_Config(context, (Config) semanticObject); 
				return; 
			case PipesGraphPackage.FILTER:
				sequence_Filter(context, (Filter) semanticObject); 
				return; 
			case PipesGraphPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case PipesGraphPackage.INSTANCE:
				sequence_Instance(context, (Instance) semanticObject); 
				return; 
			case PipesGraphPackage.PARAM:
				sequence_Param(context, (Param) semanticObject); 
				return; 
			case PipesGraphPackage.PORT:
				sequence_Port(context, (Port) semanticObject); 
				return; 
			case PipesGraphPackage.SINK:
				sequence_Sink(context, (Sink) semanticObject); 
				return; 
			case PipesGraphPackage.SOURCE:
				sequence_Source(context, (Source) semanticObject); 
				return; 
			case PipesGraphPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Config returns Config
	 *
	 * Constraint:
	 *     (
	 *         name=ID? 
	 *         params+=Param* 
	 *         imports+=Import* 
	 *         components+=Component+ 
	 *         instances+=Instance+ 
	 *         transitions+=Transition+
	 *     )
	 */
	protected void sequence_Config(ISerializationContext context, Config semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Component returns Filter
	 *     Filter returns Filter
	 *
	 * Constraint:
	 *     (name=ID inPorts+=Port+ outPorts+=Port+ code=CODE)
	 */
	protected void sequence_Filter(ISerializationContext context, Filter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     name=Anything
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PipesGraphPackage.Literals.IMPORT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PipesGraphPackage.Literals.IMPORT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportAccess().getNameAnythingParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instance returns Instance
	 *
	 * Constraint:
	 *     (component=[Component|ID] name=ID code=CODE?)
	 */
	protected void sequence_Instance(ISerializationContext context, Instance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Param returns Param
	 *
	 * Constraint:
	 *     value=Anything
	 */
	protected void sequence_Param(ISerializationContext context, Param semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PipesGraphPackage.Literals.PARAM__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PipesGraphPackage.Literals.PARAM__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParamAccess().getValueAnythingParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Port returns Port
	 *
	 * Constraint:
	 *     (name=ID type=Anything)
	 */
	protected void sequence_Port(ISerializationContext context, Port semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PipesGraphPackage.Literals.PORT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PipesGraphPackage.Literals.PORT__NAME));
			if (transientValues.isValueTransient(semanticObject, PipesGraphPackage.Literals.PORT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PipesGraphPackage.Literals.PORT__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPortAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPortAccess().getTypeAnythingParserRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Component returns Sink
	 *     Sink returns Sink
	 *
	 * Constraint:
	 *     (name=ID inPorts+=Port+ outPorts+=Port* code=CODE)
	 */
	protected void sequence_Sink(ISerializationContext context, Sink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Component returns Source
	 *     Source returns Source
	 *
	 * Constraint:
	 *     (name=ID inPorts+=Port* outPorts+=Port+ code=CODE)
	 */
	protected void sequence_Source(ISerializationContext context, Source semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (source=[Instance|ID] sourcePort=[Port|ID] target=[Instance|ID] targetPort=[Port|ID])
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PipesGraphPackage.Literals.TRANSITION__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PipesGraphPackage.Literals.TRANSITION__SOURCE));
			if (transientValues.isValueTransient(semanticObject, PipesGraphPackage.Literals.TRANSITION__SOURCE_PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PipesGraphPackage.Literals.TRANSITION__SOURCE_PORT));
			if (transientValues.isValueTransient(semanticObject, PipesGraphPackage.Literals.TRANSITION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PipesGraphPackage.Literals.TRANSITION__TARGET));
			if (transientValues.isValueTransient(semanticObject, PipesGraphPackage.Literals.TRANSITION__TARGET_PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PipesGraphPackage.Literals.TRANSITION__TARGET_PORT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransitionAccess().getSourceInstanceIDTerminalRuleCall_1_0_1(), semanticObject.eGet(PipesGraphPackage.Literals.TRANSITION__SOURCE, false));
		feeder.accept(grammarAccess.getTransitionAccess().getSourcePortPortIDTerminalRuleCall_3_0_1(), semanticObject.eGet(PipesGraphPackage.Literals.TRANSITION__SOURCE_PORT, false));
		feeder.accept(grammarAccess.getTransitionAccess().getTargetInstanceIDTerminalRuleCall_7_0_1(), semanticObject.eGet(PipesGraphPackage.Literals.TRANSITION__TARGET, false));
		feeder.accept(grammarAccess.getTransitionAccess().getTargetPortPortIDTerminalRuleCall_9_0_1(), semanticObject.eGet(PipesGraphPackage.Literals.TRANSITION__TARGET_PORT, false));
		feeder.finish();
	}
	
	
}
