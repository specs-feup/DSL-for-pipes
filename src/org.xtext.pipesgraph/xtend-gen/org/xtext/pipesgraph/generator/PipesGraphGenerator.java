/**
 * generated by Xtext 2.12.0
 */
package org.xtext.pipesgraph.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.google.common.collect.Iterators;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.pipesgraph.pipesGraph.Config;
import org.xtext.pipesgraph.pipesGraph.Filter;
import org.xtext.pipesgraph.pipesGraph.Import;
import org.xtext.pipesgraph.pipesGraph.Instance;
import org.xtext.pipesgraph.pipesGraph.Param;
import org.xtext.pipesgraph.pipesGraph.Port;
import org.xtext.pipesgraph.pipesGraph.Sink;
import org.xtext.pipesgraph.pipesGraph.Source;
import org.xtext.pipesgraph.pipesGraph.Transition;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class PipesGraphGenerator extends AbstractGenerator {
  private String packname = "pipesgraph";
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Function1<Config, String> _function = (Config it) -> {
      return it.getName();
    };
    String _head = IteratorExtensions.<String>head(IteratorExtensions.<Config, String>map(Iterators.<Config>filter(resource.getAllContents(), Config.class), _function));
    boolean _tripleNotEquals = (_head != null);
    if (_tripleNotEquals) {
      this.packname = IteratorExtensions.<Config>head(Iterators.<Config>filter(resource.getAllContents(), Config.class)).getName();
    }
    fsa.generateFile(this.buildFileName("PipeStages"), this.generatePipeStages(resource));
    fsa.generateFile("dotfile.dot", this.generateDotFile(resource));
    String _buildFileName = this.buildFileName("Component");
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(this.packname);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class Component extends PipeStages implements Comparable<Component>{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected int level = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected String name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Runnable call;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Runnable assign;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected Graph graph;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Graph getGraph(){return graph;};");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setGraph(Graph g){graph=g;};");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected HashMap<String, Port> inPorts = new HashMap<String, Port>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected HashMap<String, Port> outPorts = new HashMap<String, Port>();\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Port getPort(String name){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(inPorts.get(name) != null) ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return inPorts.get(name);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return outPorts.get(name);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int getLevel() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return level;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void checkLevel(Component c){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(level<c.getLevel())");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("level = c.getLevel()+1;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int compareTo(Component c) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return Integer.compare(this.level, c.getLevel());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void invoke(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assign.run();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("call.run();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setCall(Runnable r) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("call=r;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getName(){return name;};");
    _builder.newLine();
    _builder.append("}");
    fsa.generateFile(_buildFileName, _builder);
    String _buildFileName_1 = this.buildFileName("Source");
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package ");
    _builder_1.append(this.packname);
    _builder_1.append(";");
    _builder_1.newLineIfNotEmpty();
    _builder_1.append("\t\t \t");
    _builder_1.newLine();
    _builder_1.append("public abstract class Source extends Component{");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    fsa.generateFile(_buildFileName_1, _builder_1);
    String _buildFileName_2 = this.buildFileName("Filter");
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("package ");
    _builder_2.append(this.packname);
    _builder_2.append(";");
    _builder_2.newLineIfNotEmpty();
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("import java.util.HashMap;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("public abstract class Filter extends Component{");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("}");
    _builder_2.newLine();
    fsa.generateFile(_buildFileName_2, _builder_2);
    String _buildFileName_3 = this.buildFileName("Sink");
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("package ");
    _builder_3.append(this.packname);
    _builder_3.append(";");
    _builder_3.newLineIfNotEmpty();
    _builder_3.append("\t\t \t");
    _builder_3.newLine();
    _builder_3.append("public abstract class Sink extends Component{");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("}");
    fsa.generateFile(_buildFileName_3, _builder_3);
    String _buildFileName_4 = this.buildFileName("Port");
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("package ");
    _builder_4.append(this.packname);
    _builder_4.append(";");
    _builder_4.newLineIfNotEmpty();
    _builder_4.append("import java.util.ArrayList;");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("public class Port{");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("protected Component component;");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("protected String name;");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("protected ArrayList<Edge> edges = new ArrayList<Edge>();");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("public Port(String name, Component component){");
    _builder_4.newLine();
    _builder_4.append("\t\t");
    _builder_4.append("this.name = name;");
    _builder_4.newLine();
    _builder_4.append("\t\t");
    _builder_4.append("this.component = component;");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("public Component getComponent() {");
    _builder_4.newLine();
    _builder_4.append("\t\t");
    _builder_4.append("return component;");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("public void setComponent(Component component) {");
    _builder_4.newLine();
    _builder_4.append("\t\t");
    _builder_4.append("this.component = component;");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("public String getName() {");
    _builder_4.newLine();
    _builder_4.append("\t\t");
    _builder_4.append("return name;");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("public void setName(String name) {");
    _builder_4.newLine();
    _builder_4.append("\t\t");
    _builder_4.append("this.name = name;");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("public ArrayList<Edge> getEdges() {");
    _builder_4.newLine();
    _builder_4.append("\t\t");
    _builder_4.append("return edges;");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("public void setEdges(ArrayList<Edge> edges) {");
    _builder_4.newLine();
    _builder_4.append("\t\t");
    _builder_4.append("this.edges = edges;");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("public void addEdge(Edge edge){");
    _builder_4.newLine();
    _builder_4.append("\t\t");
    _builder_4.append("this.edges.add(edge);");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.append("}");
    _builder_4.newLine();
    fsa.generateFile(_buildFileName_4, _builder_4);
    String _buildFileName_5 = this.buildFileName("Edge");
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append("package ");
    _builder_5.append(this.packname);
    _builder_5.append(";");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("public class Edge{");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("protected Port source; // <n1.get(p1),n2.get(p2)> ");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("protected Port target;");
    _builder_5.newLine();
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("public Edge(Port source, Port target){");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("this.source = source;");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("this.target = target;");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("public Port getSource() {");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("return source;");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("public void setSource(Port source) {");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("this.source = source;");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("public Port getTarget() {");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("return target;");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("public void setTarget(Port target) {");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("this.target = target;");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.append("}");
    _builder_5.newLine();
    fsa.generateFile(_buildFileName_5, _builder_5);
    Iterable<Source> _filter = Iterables.<Source>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Source.class);
    for (final Source source : _filter) {
      String _buildFileName_6 = this.buildFileName(source.getName());
      StringConcatenation _builder_6 = new StringConcatenation();
      _builder_6.append("package ");
      _builder_6.append(this.packname);
      _builder_6.append(";");
      _builder_6.newLineIfNotEmpty();
      _builder_6.newLine();
      _builder_6.append("public class ");
      String _name = source.getName();
      _builder_6.append(_name);
      _builder_6.append(" extends Source{");
      _builder_6.newLineIfNotEmpty();
      {
        EList<Port> _inPorts = source.getInPorts();
        for(final Port port : _inPorts) {
          _builder_6.append("private ");
          String _type = port.getType();
          _builder_6.append(_type);
          _builder_6.append(" ");
          String _name_1 = port.getName();
          _builder_6.append(_name_1);
          _builder_6.append(";");
          _builder_6.newLineIfNotEmpty();
          _builder_6.append("public ");
          String _type_1 = port.getType();
          _builder_6.append(_type_1);
          _builder_6.append(" get");
          String _name_2 = port.getName();
          _builder_6.append(_name_2);
          _builder_6.append("() {return ");
          String _name_3 = port.getName();
          _builder_6.append(_name_3);
          _builder_6.append(";};");
          _builder_6.newLineIfNotEmpty();
          _builder_6.append("public void set");
          String _name_4 = port.getName();
          _builder_6.append(_name_4);
          _builder_6.append("(");
          String _type_2 = port.getType();
          _builder_6.append(_type_2);
          _builder_6.append(" val) {");
          String _name_5 = port.getName();
          _builder_6.append(_name_5);
          _builder_6.append(" = val;};");
          _builder_6.newLineIfNotEmpty();
        }
      }
      {
        EList<Port> _outPorts = source.getOutPorts();
        for(final Port port_1 : _outPorts) {
          _builder_6.append("private ");
          String _type_3 = port_1.getType();
          _builder_6.append(_type_3);
          _builder_6.append(" ");
          String _name_6 = port_1.getName();
          _builder_6.append(_name_6);
          _builder_6.append(";");
          _builder_6.newLineIfNotEmpty();
          _builder_6.append("public ");
          String _type_4 = port_1.getType();
          _builder_6.append(_type_4);
          _builder_6.append(" get");
          String _name_7 = port_1.getName();
          _builder_6.append(_name_7);
          _builder_6.append("() {return ");
          String _name_8 = port_1.getName();
          _builder_6.append(_name_8);
          _builder_6.append(";};");
          _builder_6.newLineIfNotEmpty();
          _builder_6.append("public void set");
          String _name_9 = port_1.getName();
          _builder_6.append(_name_9);
          _builder_6.append("(");
          String _type_5 = port_1.getType();
          _builder_6.append(_type_5);
          _builder_6.append(" val) {");
          String _name_10 = port_1.getName();
          _builder_6.append(_name_10);
          _builder_6.append(" = val;};");
          _builder_6.newLineIfNotEmpty();
        }
      }
      _builder_6.append("\t");
      _builder_6.append("public ");
      String _name_11 = source.getName();
      _builder_6.append(_name_11, "\t");
      _builder_6.append("(String name){");
      _builder_6.newLineIfNotEmpty();
      _builder_6.append("\t\t");
      _builder_6.append("this.name=name;");
      _builder_6.newLine();
      _builder_6.append("\t\t");
      _builder_6.append("switch (name) {");
      _builder_6.newLine();
      {
        Iterable<Instance> _filter_1 = Iterables.<Instance>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Instance.class);
        for(final Instance instance : _filter_1) {
          {
            String _name_12 = instance.getComponent().getName();
            String _name_13 = source.getName();
            boolean _equals = Objects.equal(_name_12, _name_13);
            if (_equals) {
              {
                String _code = instance.getCode();
                boolean _tripleNotEquals_1 = (_code != null);
                if (_tripleNotEquals_1) {
                  _builder_6.append("\t\t");
                  _builder_6.append("case \"");
                  String _name_14 = instance.getName();
                  _builder_6.append(_name_14, "\t\t");
                  _builder_6.append("\":");
                  _builder_6.newLineIfNotEmpty();
                  _builder_6.append("\t\t");
                  _builder_6.append("call = () -> {");
                  String _code_1 = instance.getCode();
                  int _length = instance.getCode().length();
                  int _minus = (_length - 2);
                  String _substring = _code_1.substring(2, _minus);
                  _builder_6.append(_substring, "\t\t");
                  _builder_6.append(" };");
                  _builder_6.newLineIfNotEmpty();
                  _builder_6.append("\t\t");
                  _builder_6.append("break;");
                  _builder_6.newLine();
                }
              }
            }
          }
        }
      }
      _builder_6.append("\t\t");
      _builder_6.append("default:");
      _builder_6.newLine();
      _builder_6.append("\t\t");
      _builder_6.append("call = () -> {");
      String _code_2 = source.getCode();
      int _length_1 = source.getCode().length();
      int _minus_1 = (_length_1 - 2);
      String _substring_1 = _code_2.substring(2, _minus_1);
      _builder_6.append(_substring_1, "\t\t");
      _builder_6.append("};");
      _builder_6.newLineIfNotEmpty();
      _builder_6.append("\t\t");
      _builder_6.append("break;\t\t\t\t\t");
      _builder_6.newLine();
      _builder_6.append("\t\t");
      _builder_6.append("}");
      _builder_6.newLine();
      _builder_6.append("\t\t");
      _builder_6.append("switch (name) {");
      _builder_6.newLine();
      {
        Iterable<Instance> _filter_2 = Iterables.<Instance>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Instance.class);
        for(final Instance instance_1 : _filter_2) {
          {
            String _name_15 = instance_1.getComponent().getName();
            String _name_16 = source.getName();
            boolean _equals_1 = Objects.equal(_name_15, _name_16);
            if (_equals_1) {
              _builder_6.append("\t\t");
              _builder_6.append("case \"");
              String _name_17 = instance_1.getName();
              _builder_6.append(_name_17, "\t\t");
              _builder_6.append("\":");
              _builder_6.newLineIfNotEmpty();
              _builder_6.append("\t\t");
              _builder_6.append("assign = () -> {");
              _builder_6.newLine();
              {
                Iterable<Transition> _filter_3 = Iterables.<Transition>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Transition.class);
                for(final Transition transition : _filter_3) {
                  {
                    String _name_18 = transition.getTarget().getName();
                    String _name_19 = instance_1.getName();
                    boolean _equals_2 = Objects.equal(_name_18, _name_19);
                    if (_equals_2) {
                      _builder_6.append("\t\t");
                      _builder_6.append("\t");
                      String _name_20 = transition.getTargetPort().getName();
                      _builder_6.append(_name_20, "\t\t\t");
                      _builder_6.append(" = ((");
                      String _name_21 = transition.getSource().getComponent().getName();
                      _builder_6.append(_name_21, "\t\t\t");
                      _builder_6.append(")graph.getComponent(\"");
                      String _name_22 = transition.getSource().getName();
                      _builder_6.append(_name_22, "\t\t\t");
                      _builder_6.append("\")).get");
                      String _name_23 = transition.getSourcePort().getName();
                      _builder_6.append(_name_23, "\t\t\t");
                      _builder_6.append("();");
                      _builder_6.newLineIfNotEmpty();
                    }
                  }
                }
              }
              _builder_6.append("\t\t");
              _builder_6.append("};");
              _builder_6.newLine();
              _builder_6.append("\t\t");
              _builder_6.append("break;");
              _builder_6.newLine();
            }
          }
        }
      }
      _builder_6.append("\t\t");
      _builder_6.append("default:");
      _builder_6.newLine();
      _builder_6.append("\t\t");
      _builder_6.append("assign = () -> {};");
      _builder_6.newLine();
      _builder_6.append("\t\t");
      _builder_6.append("break;\t\t\t\t\t");
      _builder_6.newLine();
      _builder_6.append("\t\t");
      _builder_6.append("}\t\t\t\t\t");
      _builder_6.newLine();
      {
        EList<Port> _inPorts_1 = source.getInPorts();
        for(final Port port_2 : _inPorts_1) {
          _builder_6.append("\t\t");
          _builder_6.append("inPorts.put(\"");
          String _name_24 = port_2.getName();
          _builder_6.append(_name_24, "\t\t");
          _builder_6.append("\", new Port(\"");
          String _name_25 = port_2.getName();
          _builder_6.append(_name_25, "\t\t");
          _builder_6.append("\",this));");
          _builder_6.newLineIfNotEmpty();
        }
      }
      {
        EList<Port> _outPorts_1 = source.getOutPorts();
        for(final Port port_3 : _outPorts_1) {
          _builder_6.append("\t\t");
          _builder_6.append("outPorts.put(\"");
          String _name_26 = port_3.getName();
          _builder_6.append(_name_26, "\t\t");
          _builder_6.append("\", new Port(\"");
          String _name_27 = port_3.getName();
          _builder_6.append(_name_27, "\t\t");
          _builder_6.append("\",this));");
          _builder_6.newLineIfNotEmpty();
        }
      }
      _builder_6.append("\t");
      _builder_6.append("}");
      _builder_6.newLine();
      _builder_6.newLine();
      _builder_6.append("} ");
      fsa.generateFile(_buildFileName_6, _builder_6);
    }
    Iterable<Filter> _filter_4 = Iterables.<Filter>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Filter.class);
    for (final Filter filter : _filter_4) {
      String _buildFileName_7 = this.buildFileName(filter.getName());
      StringConcatenation _builder_7 = new StringConcatenation();
      _builder_7.append("package ");
      _builder_7.append(this.packname);
      _builder_7.append(";");
      _builder_7.newLineIfNotEmpty();
      _builder_7.append("public class ");
      String _name_28 = filter.getName();
      _builder_7.append(_name_28);
      _builder_7.append(" extends Filter{");
      _builder_7.newLineIfNotEmpty();
      {
        EList<Port> _inPorts_2 = filter.getInPorts();
        for(final Port port_4 : _inPorts_2) {
          _builder_7.append("private ");
          String _type_6 = port_4.getType();
          _builder_7.append(_type_6);
          _builder_7.append(" ");
          String _name_29 = port_4.getName();
          _builder_7.append(_name_29);
          _builder_7.append(";");
          _builder_7.newLineIfNotEmpty();
          _builder_7.append("public ");
          String _type_7 = port_4.getType();
          _builder_7.append(_type_7);
          _builder_7.append(" get");
          String _name_30 = port_4.getName();
          _builder_7.append(_name_30);
          _builder_7.append("() {return ");
          String _name_31 = port_4.getName();
          _builder_7.append(_name_31);
          _builder_7.append(";};");
          _builder_7.newLineIfNotEmpty();
          _builder_7.append("public void set");
          String _name_32 = port_4.getName();
          _builder_7.append(_name_32);
          _builder_7.append("(");
          String _type_8 = port_4.getType();
          _builder_7.append(_type_8);
          _builder_7.append(" val) {");
          String _name_33 = port_4.getName();
          _builder_7.append(_name_33);
          _builder_7.append(" = val;};");
          _builder_7.newLineIfNotEmpty();
        }
      }
      {
        EList<Port> _outPorts_2 = filter.getOutPorts();
        for(final Port port_5 : _outPorts_2) {
          _builder_7.append("private ");
          String _type_9 = port_5.getType();
          _builder_7.append(_type_9);
          _builder_7.append(" ");
          String _name_34 = port_5.getName();
          _builder_7.append(_name_34);
          _builder_7.append(";");
          _builder_7.newLineIfNotEmpty();
          _builder_7.append("public ");
          String _type_10 = port_5.getType();
          _builder_7.append(_type_10);
          _builder_7.append(" get");
          String _name_35 = port_5.getName();
          _builder_7.append(_name_35);
          _builder_7.append("() {return ");
          String _name_36 = port_5.getName();
          _builder_7.append(_name_36);
          _builder_7.append(";};");
          _builder_7.newLineIfNotEmpty();
          _builder_7.append("public void set");
          String _name_37 = port_5.getName();
          _builder_7.append(_name_37);
          _builder_7.append("(");
          String _type_11 = port_5.getType();
          _builder_7.append(_type_11);
          _builder_7.append(" val) {");
          String _name_38 = port_5.getName();
          _builder_7.append(_name_38);
          _builder_7.append(" = val;};");
          _builder_7.newLineIfNotEmpty();
        }
      }
      _builder_7.append("public ");
      String _name_39 = filter.getName();
      _builder_7.append(_name_39);
      _builder_7.append("(String name){");
      _builder_7.newLineIfNotEmpty();
      _builder_7.append("\t");
      _builder_7.append("this.name=name;");
      _builder_7.newLine();
      _builder_7.append("\t");
      _builder_7.append("switch (name) {");
      _builder_7.newLine();
      {
        Iterable<Instance> _filter_5 = Iterables.<Instance>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Instance.class);
        for(final Instance instance_2 : _filter_5) {
          {
            String _name_40 = instance_2.getComponent().getName();
            String _name_41 = filter.getName();
            boolean _equals_3 = Objects.equal(_name_40, _name_41);
            if (_equals_3) {
              {
                String _code_3 = instance_2.getCode();
                boolean _tripleNotEquals_2 = (_code_3 != null);
                if (_tripleNotEquals_2) {
                  _builder_7.append("\t");
                  _builder_7.append("case \"");
                  String _name_42 = instance_2.getName();
                  _builder_7.append(_name_42, "\t");
                  _builder_7.append("\":");
                  _builder_7.newLineIfNotEmpty();
                  _builder_7.append("\t");
                  _builder_7.append("call = () -> {");
                  String _code_4 = instance_2.getCode();
                  int _length_2 = instance_2.getCode().length();
                  int _minus_2 = (_length_2 - 2);
                  String _substring_2 = _code_4.substring(2, _minus_2);
                  _builder_7.append(_substring_2, "\t");
                  _builder_7.append("};");
                  _builder_7.newLineIfNotEmpty();
                  _builder_7.append("\t");
                  _builder_7.append("break;");
                  _builder_7.newLine();
                }
              }
            }
          }
        }
      }
      _builder_7.append("\t");
      _builder_7.append("default:");
      _builder_7.newLine();
      _builder_7.append("\t");
      _builder_7.append("call = () -> {");
      String _code_5 = filter.getCode();
      int _length_3 = filter.getCode().length();
      int _minus_3 = (_length_3 - 2);
      String _substring_3 = _code_5.substring(2, _minus_3);
      _builder_7.append(_substring_3, "\t");
      _builder_7.append("};");
      _builder_7.newLineIfNotEmpty();
      _builder_7.append("\t");
      _builder_7.append("break;}");
      _builder_7.newLine();
      _builder_7.append("\t");
      _builder_7.append("switch (name) {");
      _builder_7.newLine();
      {
        Iterable<Instance> _filter_6 = Iterables.<Instance>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Instance.class);
        for(final Instance instance_3 : _filter_6) {
          {
            String _name_43 = instance_3.getComponent().getName();
            String _name_44 = filter.getName();
            boolean _equals_4 = Objects.equal(_name_43, _name_44);
            if (_equals_4) {
              _builder_7.append("\t");
              _builder_7.append("case \"");
              String _name_45 = instance_3.getName();
              _builder_7.append(_name_45, "\t");
              _builder_7.append("\":");
              _builder_7.newLineIfNotEmpty();
              _builder_7.append("\t");
              _builder_7.append("assign = () -> {");
              _builder_7.newLine();
              {
                Iterable<Transition> _filter_7 = Iterables.<Transition>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Transition.class);
                for(final Transition transition_1 : _filter_7) {
                  {
                    String _name_46 = transition_1.getTarget().getName();
                    String _name_47 = instance_3.getName();
                    boolean _equals_5 = Objects.equal(_name_46, _name_47);
                    if (_equals_5) {
                      _builder_7.append("\t");
                      _builder_7.append("\t");
                      String _name_48 = transition_1.getTargetPort().getName();
                      _builder_7.append(_name_48, "\t\t");
                      _builder_7.append(" = ((");
                      String _name_49 = transition_1.getSource().getComponent().getName();
                      _builder_7.append(_name_49, "\t\t");
                      _builder_7.append(")graph.getComponent(\"");
                      String _name_50 = transition_1.getSource().getName();
                      _builder_7.append(_name_50, "\t\t");
                      _builder_7.append("\")).get");
                      String _name_51 = transition_1.getSourcePort().getName();
                      _builder_7.append(_name_51, "\t\t");
                      _builder_7.append("();");
                      _builder_7.newLineIfNotEmpty();
                    }
                  }
                }
              }
              _builder_7.append("\t");
              _builder_7.append("};");
              _builder_7.newLine();
              _builder_7.append("\t");
              _builder_7.append("break;");
              _builder_7.newLine();
            }
          }
        }
      }
      _builder_7.append("\t");
      _builder_7.append("default:");
      _builder_7.newLine();
      _builder_7.append("\t");
      _builder_7.append("assign = () -> {};");
      _builder_7.newLine();
      _builder_7.append("\t");
      _builder_7.append("break;\t\t\t\t\t");
      _builder_7.newLine();
      _builder_7.append("\t");
      _builder_7.append("}");
      _builder_7.newLine();
      {
        EList<Port> _inPorts_3 = filter.getInPorts();
        for(final Port port_6 : _inPorts_3) {
          _builder_7.append("\t");
          _builder_7.append("inPorts.put(\"");
          String _name_52 = port_6.getName();
          _builder_7.append(_name_52, "\t");
          _builder_7.append("\", new Port(\"");
          String _name_53 = port_6.getName();
          _builder_7.append(_name_53, "\t");
          _builder_7.append("\",this));");
          _builder_7.newLineIfNotEmpty();
        }
      }
      {
        EList<Port> _outPorts_3 = filter.getOutPorts();
        for(final Port port_7 : _outPorts_3) {
          _builder_7.append("\t");
          _builder_7.append("outPorts.put(\"");
          String _name_54 = port_7.getName();
          _builder_7.append(_name_54, "\t");
          _builder_7.append("\", new Port(\"");
          String _name_55 = port_7.getName();
          _builder_7.append(_name_55, "\t");
          _builder_7.append("\",this));");
          _builder_7.newLineIfNotEmpty();
        }
      }
      _builder_7.append("\t");
      _builder_7.append("}");
      _builder_7.newLine();
      _builder_7.newLine();
      _builder_7.append("}");
      fsa.generateFile(_buildFileName_7, _builder_7);
    }
    Iterable<Sink> _filter_8 = Iterables.<Sink>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Sink.class);
    for (final Sink sink : _filter_8) {
      {
        String _buildFileName_8 = this.buildFileName(sink.getName());
        StringConcatenation _builder_8 = new StringConcatenation();
        _builder_8.append("package ");
        _builder_8.append(this.packname);
        _builder_8.append(";");
        _builder_8.newLineIfNotEmpty();
        _builder_8.append("public class ");
        String _name_56 = sink.getName();
        _builder_8.append(_name_56);
        _builder_8.append(" extends Sink{");
        _builder_8.newLineIfNotEmpty();
        _builder_8.newLine();
        {
          EList<Port> _inPorts_4 = sink.getInPorts();
          for(final Port port_8 : _inPorts_4) {
            _builder_8.append("private ");
            String _type_12 = port_8.getType();
            _builder_8.append(_type_12);
            _builder_8.append(" ");
            String _name_57 = port_8.getName();
            _builder_8.append(_name_57);
            _builder_8.append(";");
            _builder_8.newLineIfNotEmpty();
            _builder_8.append("public ");
            String _type_13 = port_8.getType();
            _builder_8.append(_type_13);
            _builder_8.append(" get");
            String _name_58 = port_8.getName();
            _builder_8.append(_name_58);
            _builder_8.append("() {return ");
            String _name_59 = port_8.getName();
            _builder_8.append(_name_59);
            _builder_8.append(";};");
            _builder_8.newLineIfNotEmpty();
            _builder_8.append("public void set");
            String _name_60 = port_8.getName();
            _builder_8.append(_name_60);
            _builder_8.append("(");
            String _type_14 = port_8.getType();
            _builder_8.append(_type_14);
            _builder_8.append(" val) {");
            String _name_61 = port_8.getName();
            _builder_8.append(_name_61);
            _builder_8.append(" = val;};");
            _builder_8.newLineIfNotEmpty();
          }
        }
        {
          EList<Port> _outPorts_4 = sink.getOutPorts();
          for(final Port port_9 : _outPorts_4) {
            _builder_8.append("private ");
            String _type_15 = port_9.getType();
            _builder_8.append(_type_15);
            _builder_8.append(" ");
            String _name_62 = port_9.getName();
            _builder_8.append(_name_62);
            _builder_8.append(";");
            _builder_8.newLineIfNotEmpty();
            _builder_8.append("public ");
            String _type_16 = port_9.getType();
            _builder_8.append(_type_16);
            _builder_8.append(" get");
            String _name_63 = port_9.getName();
            _builder_8.append(_name_63);
            _builder_8.append("() {return ");
            String _name_64 = port_9.getName();
            _builder_8.append(_name_64);
            _builder_8.append(";};");
            _builder_8.newLineIfNotEmpty();
            _builder_8.append("public void set");
            String _name_65 = port_9.getName();
            _builder_8.append(_name_65);
            _builder_8.append("(");
            String _type_17 = port_9.getType();
            _builder_8.append(_type_17);
            _builder_8.append(" val) {");
            String _name_66 = port_9.getName();
            _builder_8.append(_name_66);
            _builder_8.append(" = val;};");
            _builder_8.newLineIfNotEmpty();
          }
        }
        _builder_8.append("\t");
        _builder_8.append("public ");
        String _name_67 = sink.getName();
        _builder_8.append(_name_67, "\t");
        _builder_8.append("(String name){");
        _builder_8.newLineIfNotEmpty();
        _builder_8.append("\t");
        _builder_8.append("this.name=name;");
        _builder_8.newLine();
        _builder_8.append("\t");
        _builder_8.append("switch (name) {");
        _builder_8.newLine();
        {
          Iterable<Instance> _filter_9 = Iterables.<Instance>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Instance.class);
          for(final Instance instance_4 : _filter_9) {
            {
              String _name_68 = instance_4.getComponent().getName();
              String _name_69 = sink.getName();
              boolean _equals_6 = Objects.equal(_name_68, _name_69);
              if (_equals_6) {
                {
                  String _code_6 = instance_4.getCode();
                  boolean _tripleNotEquals_3 = (_code_6 != null);
                  if (_tripleNotEquals_3) {
                    _builder_8.append("\t");
                    _builder_8.append("case \"");
                    String _name_70 = instance_4.getName();
                    _builder_8.append(_name_70, "\t");
                    _builder_8.append("\":");
                    _builder_8.newLineIfNotEmpty();
                    _builder_8.append("\t");
                    _builder_8.append("call = () -> {");
                    String _code_7 = instance_4.getCode();
                    int _length_4 = instance_4.getCode().length();
                    int _minus_4 = (_length_4 - 2);
                    String _substring_4 = _code_7.substring(2, _minus_4);
                    _builder_8.append(_substring_4, "\t");
                    _builder_8.append("};");
                    _builder_8.newLineIfNotEmpty();
                    _builder_8.append("\t");
                    _builder_8.append("break;");
                    _builder_8.newLine();
                  }
                }
              }
            }
          }
        }
        _builder_8.append("\t");
        _builder_8.append("default:");
        _builder_8.newLine();
        _builder_8.append("\t");
        _builder_8.append("call = () -> {");
        String _code_8 = sink.getCode();
        int _length_5 = sink.getCode().length();
        int _minus_5 = (_length_5 - 2);
        String _substring_5 = _code_8.substring(2, _minus_5);
        _builder_8.append(_substring_5, "\t");
        _builder_8.append("};");
        _builder_8.newLineIfNotEmpty();
        _builder_8.append("\t");
        _builder_8.append("break;\t");
        _builder_8.newLine();
        _builder_8.append("\t");
        _builder_8.append("}");
        _builder_8.newLine();
        _builder_8.append("\t");
        _builder_8.append("switch (name) {");
        _builder_8.newLine();
        {
          Iterable<Instance> _filter_10 = Iterables.<Instance>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Instance.class);
          for(final Instance instance_5 : _filter_10) {
            {
              String _name_71 = instance_5.getComponent().getName();
              String _name_72 = sink.getName();
              boolean _equals_7 = Objects.equal(_name_71, _name_72);
              if (_equals_7) {
                _builder_8.append("\t");
                _builder_8.append("case \"");
                String _name_73 = instance_5.getName();
                _builder_8.append(_name_73, "\t");
                _builder_8.append("\":");
                _builder_8.newLineIfNotEmpty();
                _builder_8.append("\t");
                _builder_8.append("assign = () -> {");
                _builder_8.newLine();
                {
                  Iterable<Transition> _filter_11 = Iterables.<Transition>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Transition.class);
                  for(final Transition transition_2 : _filter_11) {
                    {
                      String _name_74 = transition_2.getTarget().getName();
                      String _name_75 = instance_5.getName();
                      boolean _equals_8 = Objects.equal(_name_74, _name_75);
                      if (_equals_8) {
                        _builder_8.append("\t");
                        _builder_8.append("\t");
                        String _name_76 = transition_2.getTargetPort().getName();
                        _builder_8.append(_name_76, "\t\t");
                        _builder_8.append(" = ((");
                        String _name_77 = transition_2.getSource().getComponent().getName();
                        _builder_8.append(_name_77, "\t\t");
                        _builder_8.append(")graph.getComponent(\"");
                        String _name_78 = transition_2.getSource().getName();
                        _builder_8.append(_name_78, "\t\t");
                        _builder_8.append("\")).get");
                        String _name_79 = transition_2.getSourcePort().getName();
                        _builder_8.append(_name_79, "\t\t");
                        _builder_8.append("();");
                        _builder_8.newLineIfNotEmpty();
                      }
                    }
                  }
                }
                _builder_8.append("\t");
                _builder_8.append("};");
                _builder_8.newLine();
                _builder_8.append("\t");
                _builder_8.append("break;");
                _builder_8.newLine();
              }
            }
          }
        }
        _builder_8.append("\t");
        _builder_8.append("default:");
        _builder_8.newLine();
        _builder_8.append("\t");
        _builder_8.append("assign = () -> {};");
        _builder_8.newLine();
        _builder_8.append("\t");
        _builder_8.append("break;\t\t\t\t\t");
        _builder_8.newLine();
        _builder_8.append("\t");
        _builder_8.append("}");
        _builder_8.newLine();
        {
          EList<Port> _inPorts_5 = sink.getInPorts();
          for(final Port port_10 : _inPorts_5) {
            _builder_8.append("inPorts.put(\"");
            String _name_80 = port_10.getName();
            _builder_8.append(_name_80);
            _builder_8.append("\", new Port(\"");
            String _name_81 = port_10.getName();
            _builder_8.append(_name_81);
            _builder_8.append("\",this));");
            _builder_8.newLineIfNotEmpty();
          }
        }
        {
          EList<Port> _outPorts_5 = sink.getOutPorts();
          for(final Port port_11 : _outPorts_5) {
            _builder_8.append("outPorts.put(\"");
            String _name_82 = port_11.getName();
            _builder_8.append(_name_82);
            _builder_8.append("\", new Port(\"");
            String _name_83 = port_11.getName();
            _builder_8.append(_name_83);
            _builder_8.append("\",this));");
            _builder_8.newLineIfNotEmpty();
          }
        }
        _builder_8.append("}");
        _builder_8.newLine();
        _builder_8.newLine();
        _builder_8.append("}");
        _builder_8.newLine();
        fsa.generateFile(_buildFileName_8, _builder_8);
        EObject _head_1 = IterableExtensions.<EObject>head(resource.getContents());
        fsa.generateFile(this.buildFileName("Graph"), this.generate(((Config) _head_1)));
      }
    }
  }
  
  public String buildFileName(final String filename) {
    return (((this.packname + "/") + filename) + ".java");
  }
  
  public CharSequence generateDotFile(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("digraph G {\t");
    _builder.newLine();
    {
      Iterable<Instance> _filter = Iterables.<Instance>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Instance.class);
      for(final Instance instance : _filter) {
        _builder.append("rankdir=TB");
        _builder.newLine();
        String _name = instance.getName();
        _builder.append(_name);
        _builder.append(" [shape=plaintext ");
        _builder.newLineIfNotEmpty();
        _builder.append("label=");
        _builder.newLine();
        _builder.append("<<TABLE BORDER=\"0\" CELLBORDER=\"0\" CELLSPACING=\"0\" CELLPADDING=\"0\">");
        _builder.newLine();
        {
          int _length = ((Object[])Conversions.unwrapArray(instance.getComponent().getInPorts(), Object.class)).length;
          boolean _notEquals = (_length != 0);
          if (_notEquals) {
            _builder.append("\t");
            _builder.append("<TR>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("<TD BORDER=\"0\">");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("<TABLE BORDER=\"0\" CELLBORDER=\"0\" CELLSPACING=\"0\" CELLPADDING=\"0\">");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("<TR>");
            _builder.newLine();
            {
              EList<Port> _inPorts = instance.getComponent().getInPorts();
              for(final Port port : _inPorts) {
                _builder.append("\t");
                _builder.append("\t\t\t");
                _builder.append("<TD PORT=\"");
                String _name_1 = port.getName();
                _builder.append(_name_1, "\t\t\t\t");
                _builder.append("\" BORDER=\"1\" CELLPADDING=\"1\">");
                String _name_2 = port.getName();
                _builder.append(_name_2, "\t\t\t\t");
                _builder.append("</TD>");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("</TR>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("</TABLE>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("</TD>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("</TR>");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.append("<TR>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("<TD BORDER=\"1\" CELLPADDING=\"4\" COLOR=\"black\">");
        String _name_3 = instance.getName();
        _builder.append(_name_3, "\t\t");
        _builder.append("</TD>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("</TR>");
        _builder.newLine();
        {
          int _length_1 = ((Object[])Conversions.unwrapArray(instance.getComponent().getOutPorts(), Object.class)).length;
          boolean _notEquals_1 = (_length_1 != 0);
          if (_notEquals_1) {
            _builder.append("\t");
            _builder.append("<TR>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("<TD BORDER=\"0\">");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("<TABLE BORDER=\"0\" CELLBORDER=\"0\" CELLSPACING=\"0\" CELLPADDING=\"0\">");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("<TR>");
            _builder.newLine();
            {
              EList<Port> _outPorts = instance.getComponent().getOutPorts();
              for(final Port port_1 : _outPorts) {
                _builder.append("\t");
                _builder.append("\t\t\t");
                _builder.append("<TD PORT=\"");
                String _name_4 = port_1.getName();
                _builder.append(_name_4, "\t\t\t\t");
                _builder.append("\" BORDER=\"1\" CELLPADDING=\"1\">");
                String _name_5 = port_1.getName();
                _builder.append(_name_5, "\t\t\t\t");
                _builder.append("</TD>");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("</TR>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("</TABLE>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("</TD>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("</TR>");
            _builder.newLine();
          }
        }
        _builder.append("</TABLE>>];");
        _builder.newLine();
      }
    }
    {
      Iterable<Transition> _filter_1 = Iterables.<Transition>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Transition.class);
      for(final Transition transition : _filter_1) {
        String _name_6 = transition.getSource().getName();
        _builder.append(_name_6);
        _builder.append(":");
        String _name_7 = transition.getSourcePort().getName();
        _builder.append(_name_7);
        _builder.append(" -> ");
        String _name_8 = transition.getTarget().getName();
        _builder.append(_name_8);
        _builder.append(":");
        String _name_9 = transition.getTargetPort().getName();
        _builder.append(_name_9);
        _builder.append(" [style=\"\", arrowhead=\"normal\", color=black, headlabel=<>, fontsize=10, labelangle=45, labeldistance=2.0, labelfontcolor=black];");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generatePipeStages(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(this.packname);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    {
      Iterable<Import> _filter = Iterables.<Import>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Import.class);
      for(final Import imp : _filter) {
        _builder.append("\t");
        _builder.append("import ");
        String _name = imp.getName();
        _builder.append(_name, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("public abstract class PipeStages{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/*Vars*/");
    _builder.newLine();
    {
      Iterable<Param> _filter_1 = Iterables.<Param>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Param.class);
      for(final Param par : _filter_1) {
        _builder.append("\t");
        String _value = par.getValue();
        _builder.append(_value, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public String className(final Resource res) {
    String name = res.getURI().lastSegment();
    return name.substring(0, name.indexOf("."));
  }
  
  public CharSequence generate(final Config config) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(this.packname);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    {
      EList<Import> _imports = config.getImports();
      for(final Import imp : _imports) {
        _builder.append("import ");
        String _name = imp.getName();
        _builder.append(_name);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.PriorityQueue;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Graph extends PipeStages{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ArrayList<Edge> edges = new ArrayList<Edge>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private HashMap<String,Component> nodes = new HashMap<String,Component>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private PriorityQueue<Component> components = new PriorityQueue<Component>();\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Component getComponent(String comp) {return nodes.get(comp);};");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addEdge(String from, String pfrom, String to, String pto){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Component csource = nodes.get(from);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Component ctarget = nodes.get(to);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Port source = csource.getPort(pfrom);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Port target = ctarget.getPort(pto);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Edge edge = new Edge(source, target);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("edges.add(edge);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ctarget.checkLevel(csource);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Graph() {");
    _builder.newLine();
    {
      EList<Instance> _instances = config.getInstances();
      for(final Instance instance : _instances) {
        _builder.append("\t\t");
        _builder.append("nodes.put(\"");
        String _name_1 = instance.getName();
        _builder.append(_name_1, "\t\t");
        _builder.append("\", new ");
        String _name_2 = instance.getComponent().getName();
        _builder.append(_name_2, "\t\t");
        _builder.append("(\"");
        String _name_3 = instance.getName();
        _builder.append(_name_3, "\t\t");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("nodes.get(\"");
        String _name_4 = instance.getName();
        _builder.append(_name_4, "\t\t");
        _builder.append("\").setGraph(this);\t\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("components.add(nodes.get(\"");
        String _name_5 = instance.getName();
        _builder.append(_name_5, "\t\t");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Transition> _transitions = config.getTransitions();
      for(final Transition t : _transitions) {
        _builder.append("\t\t");
        _builder.append("addEdge(\"");
        String _name_6 = t.getSource().getName();
        _builder.append(_name_6, "\t\t");
        _builder.append("\",\"");
        String _name_7 = t.getTargetPort().getName();
        _builder.append(_name_7, "\t\t");
        _builder.append("\",\"");
        String _name_8 = t.getTarget().getName();
        _builder.append(_name_8, "\t\t");
        _builder.append("\",\"");
        String _name_9 = t.getSourcePort().getName();
        _builder.append(_name_9, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void invoke(){");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("for(Component c: components) {");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("c.invoke();");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
}
